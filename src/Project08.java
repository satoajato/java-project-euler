/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9x9x8x9 = 5832.
7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

public class Project08 {
    public static void main(String[] args) throws Exception {
        
        String number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
        int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13;
        long max = 0;
        long product = 0;

        for(int i = 0; i<number.length()-12; i++) {
            n1 = Integer.parseInt(number.substring(i,i+1));
            n2 = Integer.parseInt(number.substring(i+1,i+2));
            n3 = Integer.parseInt(number.substring(i+2,i+3));
            n4 = Integer.parseInt(number.substring(i+3,i+4));
            n5 = Integer.parseInt(number.substring(i+4,i+5));
            n6 = Integer.parseInt(number.substring(i+5,i+6));
            n7 = Integer.parseInt(number.substring(i+6,i+7));
            n8 = Integer.parseInt(number.substring(i+7,i+8));
            n9 = Integer.parseInt(number.substring(i+8,i+9));
            n10 = Integer.parseInt(number.substring(i+9,i+10));
            n11 = Integer.parseInt(number.substring(i+10,i+11));
            n12 = Integer.parseInt(number.substring(i+11,i+12));
            n13 = Integer.parseInt(number.substring(i+12,i+13));

            product = (long) n1 * n2 * n3 * n4 * n5 * n6 * n7 * n8 * n9 * n10 * n11 * n12 * n13;
            
            if(product > max) {
                max = product;
            }
        }
        System.out.println(max);
    }
}
